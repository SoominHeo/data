Actually, I think it'll eventually be seen as probably the single biggest idea that's emerged in the past century.

It's the idea of computation.

Now, of course, that idea has brought us all of the computer technology we have today and so on.

But there's actually a lot more to computation than that.

It's really a very deep, very powerful, very fundamental idea, whose effects we've only just begun to see. 

So I started off at a young age as a physicist using computers as tools.

Then, I started drilling down, thinking about the computations I might want to do, trying to figure out what primitives they could be built up from and how they could be automated as much as possible.

Eventually, I created a whole structure based on symbolic programming and so on that let me build Mathematica.

But I wanted to look not at the astronomical universe, but at the computational universe. 

So we normally think of programs as being complicated things that we build for very specific purposes.

But what about the space of all possible programs?

Here's a representation of a really simple program.

So, if we run this program, this is what we get.

Very simple.

So let's try changing the rule for this program a little bit.

Now we get another result, still very simple.

Try changing it again.

You get something a little bit more complicated.

Well, we can do a little experiment.

Let's just do a little mathematical experiment, try and find out. 

Let's just run all possible programs of the particular type that we're looking at.

They're called cellular automata.

You can see a lot of diversity in the behavior here.

We're just following this very simple rule at the bottom here, but we're getting all this amazing stuff.

This science is different, more general, than the mathematics-based science that we've had for the past 300 or so years.

You know, it's always seemed like a big mystery: how nature, seemingly so effortlessly, manages to produce so much that seems to us so complex.

And knowing that starts to explain a lot of long-standing mysteries in science.

The only way to find its outcome is, effectively, just to watch it evolve.

It's connected to, what I call, the principle of computational equivalence, which tells us that even incredibly simple systems can do computations as sophisticated as anything.

It doesn't take lots of technology or biological evolution to be able to do arbitrary computation; just something that happens, naturally, all over the place.

Things with rules as simple as these can do it.

Well, this has deep implications about the limits of science, about predictability and controllability of things like biological processes or economies, about intelligence in the universe, about questions like free will and about creating technology. 

People like Leibniz had wondered about that too 300 years earlier.

But I'd always assumed that to make progress, I'd essentially have to replicate a whole brain.

So, it's been a big, very complex project, which I was not sure was going to work at all.

But I'm happy to say it's actually going really well.

And last year we were able to release the first website version of Wolfram Alpha.

Its purpose is to be a serious knowledge engine that computes answers to questions.

So let's give it a try.

Let's start off with something really easy.

So far so good.

(Laughter) Let's try something a little bit harder.

Let's do some mathy thing, and with luck it'll work out the answer and try and tell us some interesting things things about related math.

And it should be able to tell us that.

The idea is that we can just type this in, this kind of question in, however we think of it.

So Wolfram Alpha knows about lots and lots of kinds of things.

It's got, by now, pretty good coverage of everything you might find in a standard reference library.

Now, of course, Wolfram Alpha is a monumentally huge, long-term project with lots and lots of challenges.

For a start, one has to curate a zillion different sources of facts and data, and we built quite a pipeline of Mathematica automation and human domain experts for doing this.

But that's just the beginning.

Well, even starting from Mathematica, this is still a huge amount of work.

So far, there are about 8 million lines of Mathematica code in Wolfram Alpha built by experts from many, many different fields. 

Well, a crucial idea of Wolfram Alpha is that you can just ask it questions using ordinary human language, which means that we've got to be able to take all those strange utterances that people type into the input field and understand them.

And I must say that I thought that step might just be plain impossible.

And, of course, now with Wolfram Alpha actually out in the wild, we can learn from its actual usage.

Right now, if we look at web queries, more than 80 percent of them get handled successfully the first time.

And if you look at things like the iPhone app, the fraction is considerably larger.

So, I'm pretty pleased with it all. 

But, in many ways, we're still at the very beginning with Wolfram Alpha.

You know, we have a fairly interesting situation right now.

Let me show you a couple of examples here.

So here's a trivial piece of Mathematica programming.

Here's something where we're sort of integrating a bunch of different capabilities here.

Here we'll just create, in this line, a little user interface that allows us to do something fun there.

If you go on, that's a slightly more complicated program that's now doing all sorts of algorithmic things and creating user interface and so on.

But it's something that is very precise stuff.

It's a precise specification with a precise formal language that causes Mathematica to know what to do here. 

So what happens when you put these things together?

I think it's actually rather wonderful.

With Wolfram Alpha inside Mathematica, you can, for example, make precise programs that call on real world data.

Here's a real simple example.

You can also just sort of give vague input and then try and have Wolfram Alpha figure out what you're talking about.

Let's try this here.

But actually I think the most exciting thing about this is that it really gives one the chance to democratize programming.

So, sometimes, Wolfram Alpha will be able to do the whole thing immediately and just give back a whole big program that you can then compute with.

I'll show you one example here.

This is just an example of one of these computable documents.

This is probably a fairly small piece of Mathematica code that's able to be run here. 

So, given our new kind of science, is there a general way to use it to make technology?

So, with physical materials, we're used to going around the world and discovering that particular materials are useful for particular technological purposes.

Well, it turns out we can do very much the same kind of thing in the computational universe.

There's an inexhaustible supply of programs out there.

The challenge is to see how to harness them for human purposes.

Something like Rule 30, for example, turns out to be a really good randomness generator.

Other simple programs are good models for processes in the natural or social world.

And, for example, Wolfram Alpha and Mathematica are actually now full of algorithms that we discovered by searching the computational universe.

In a sense, we can use the computational universe to get mass customized creativity.

I'm hoping we can, for example, use that even to get Wolfram Alpha to routinely do invention and discovery on the fly, and to find all sorts of wonderful stuff that no engineer and no process of incremental evolution would ever come up with. 

Perhaps there's even some quite simple rule, some simple program for our universe.

Well, the history of physics would have us believe that the rule for the universe must be pretty complicated.

But in the computational universe, we've now seen how rules that are incredibly simple can produce incredibly rich and complex behavior.

So could that be what's going on with our whole universe?

Well, then the universe has to evolve by applying little rules that progressively update this network.

And each possible rule, in a sense, corresponds to a candidate universe. 

Actually, I haven't shown these before, but here are a few of the candidate universes that I've looked at.

Some of these are hopeless universes, completely sterile, with other kinds of pathologies like no notion of space, no notion of time, no matter, other problems like that.

But the exciting thing that I've found in the last few years is that you actually don't have to go very far in the computational universe before you start finding candidate universes that aren't obviously not our universe.

A few years ago, I was pretty excited to discover that there are candidate universes with incredibly simple rules that successfully reproduce special relativity, and even general relativity and gravitation, and at least give hints of quantum mechanics.

So, will we find the whole of physics?

Not an easy project.

One's got to build a lot of technology.

One's got to build a structure that's probably at least as deep as existing physics.

And I'm not sure what the best way to organize the whole thing is.

Build a team, open it up, offer prizes and so on.

But I'll tell you, here today, that I'm committed to seeing this project done, to see if, within this decade, we can finally hold in our hands the rule for our universe and know where our universe lies in the space of all possible universes ... and be able to type into Wolfram Alpha, "the theory of the universe," and have it tell us. 

So I've been working on the idea of computation now for more than 30 years, building tools and methods and turning intellectual ideas into millions of lines of code and grist for server farms and so on.

With every passing year, I realize how much more powerful the idea of computation really is.

It's taken us a long way already, but there's so much more to come.

From the foundations of science to the limits of technology to the very definition of the human condition, I think computation is destined to be the defining idea of our future. 

Thank you. 

Chris Anderson: That was astonishing.

So, that was, fair to say, an astonishing talk.

Are you able to say in a sentence or two how this type of thinking could integrate at some point to things like string theory or the kind of things that people think of as the fundamental explanations of the universe? 

Does your work relate to his? 

SW: I think so.

I view Benoit Mandelbrot's work as one of the founding contributions to this kind of area.

That's one of the ways that you get towards true complexity.

I think things like the Rule 30 cellular automaton get us to a different level.

CA: Stephen Wolfram, thank you. 

