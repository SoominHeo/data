Code is the next universal language.

In the seventies, it was punk music that drove the whole generation.

In the eighties, it was probably money.

My personal journey into the world of programming and technology started at the tender age of 14.

I had this mad teenage crush on an older man, and the older man in question just happened to be the then Vice President of the United States, Mr. Al Gore.

And I did what every single teenage girl would want to do.

I wanted to somehow express all of this love, so I built him a website, it's over here.

And in 2001, there was no Tumblr, there was no Facebook, there was no Pinterest.

So I needed to learn to code in order to express all of this longing and loving. 

And that is how programming started for me.

It started as a means of self-expression.

Just like when I was smaller, I would use crayons and legos.

And when I was older, I would use guitar lessons and theater plays.

Here's what I think today.

Little girls don't know that they are not supposed to like computers.

Little girls are amazing.

And they don't know that they are not supposed to like computers.

It's the parents who do.

It's us parents who feel like computer science is this esoteric, weird science discipline that only belongs to the mystery makers.

That it's almost as far removed from everyday life as, say, nuclear physics. 

And they are partly right about that.

There's a lot of syntax and controls and data structures and algorithms and practices, protocols and paradigms in programming.

And we as a community, we've made computers smaller and smaller.

We've built layers and layers of abstraction on top of each other between the man and the machine to the point that we no longer have any idea how computers work or how to talk to them.

"It's magic," some of us say.

"It's too complicated," the others say. 

Well, it's neither.

It's not magic and it's not complicated.

It all just happened really, really, really fast.

Computer scientists built these amazing, beautiful machines, but they made them very, very foreign to us, and also the language we speak to the computers so that we don't know how to speak to the computers anymore without our fancy user interfaces. 

And that Bertrand Russell's lifelong quest to find an exact language between English and mathematics found its home inside of a computer.

I was a programmer, but no one knew it. 

The kids of today, they tap, swipe and pinch their way through the world.

But unless we give them tools to build with computers, we are raising only consumers instead of creators. 

This whole quest led me to this little girl.

Her name is Ruby, she is six years old.

She is completely fearless, imaginative and a little bit bossy.

Ruby taught me that you're not supposed to be afraid of the bugs under your bed.

And even the biggest of the problems are a group of tiny problems stuck together.

She has friends like the Snow Leopard, who is beautiful but doesn't want to play with the other kids.

And she has friends like the green robots that are really friendly but super messy.

And she has friends like Linux the penguin who's really ruthlessly efficient, but somewhat hard to understand.

And idealistic foxes, and so on. 

In Ruby's world, you learn technology through play.

And you learn until loops by repeating that sequence until mom gets really mad.

(Laughter) And most of all, you learn that there are no ready answers. 

When coming up with the curriculum for Ruby's world, I needed to really ask the kids how they see the world and what kind of questions they have and I would organize play testing sessions.

I would start by showing the kids these four pictures.

I would show them a picture of a car, a grocery store, a dog and a toilet.

And I would ask, "Which one of these do you think is a computer?"

And kids, you know what?

(Laughter) 

And then I had this little girl who came to me and took a bicycle lamp and she said, "This bicycle lamp, if it were a computer, it would change colors."

And I said, "That's a really good idea, what else could it do?"

Final story, we also built a computer.

And these kids are going to have a profoundly different view of the world and the way we build it with technology. 

Finally, the more approachable, the more inclusive, and the more diverse we make the world of technology, the more colorful and better the world will look like.

Imagine a world where the little Ada Lovelaces of tomorrow, who live in a permanent reality of 1s and 0s, they grow up to be very optimistic and brave about technology.

They embrace the powers and the opportunities and the limitations of the world.

A world of technology that is wonderful, whimsical and a tiny bit weird. 

When I was a girl, I wanted to be a storyteller.

I still create worlds.

Instead of stories, I do them with code. 

Create something out of nothing with the pure power of logic. 

Thank you. 

