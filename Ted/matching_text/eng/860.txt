He never went back to school.

Instead, he went on to build a glittering empire of department stores.

His department stores confiscated, he spent the rest of his life in a relentless pursuit of art and culture.

Such is the power of self-study. 

And these are my parents.

They too did not enjoy the privilege of college education.

They were too busy building a family and a country.

I remember quite vividly my father telling me that when everyone in the neighborhood will have a TV set, then we'll buy a normal F.M.

Instead, they can provide an environment and resources that tease out your natural ability to learn on your own.

Self-study, self-exploration, self-empowerment: these are the virtues of a great education. 

So it's not surprising that, about 12 years ago, when Noam and I were already computer science professors, we were equally frustrated by the same phenomenon.

So Noam and I had this insight that if we want our students to understand how computers work, and understand it in the marrow of their bones, then perhaps the best way to go about it is to have them build a complete, working, general-purpose, useful computer, hardware and software, from the ground up, from first principles. 

It is nothing more than a trivial logic gate with four input-output states.

It's a tremendous personal triumph of going from first principles all the way to a fantastically complex and useful system. 

Noam and I worked five years to facilitate this ascent and to create the tools and infrastructure that will enable students to build it in one semester.

And this is the great team that helped us make it happen.

The trick was to decompose the computer's construction into numerous stand-alone modules, each of which could be individually specified, built and unit-tested in isolation from the rest of the project.

And from day one, Noam and I decided to put all these building blocks freely available in open source on the Web.

So chip specifications, APIs, project descriptions, software tools, hardware simulators, CPU emulators, stacks of hundreds of slides, lectures -- we laid out everything on the Web and invited the world to come over, take whatever they need, and do whatever they want with it. 

And then something fascinating happened.

The world came.

And in short order, thousands of people were building our machine.

We just observed how self-organized courses were kind of spontaneously spawning out of our materials.

For example, Pramode C.E., an engineer from Kerala, India, has organized groups of self-learners who build our computer under his good guidance.

And Parag Shah, another engineer, from Mumbai, has unbundled our projects into smaller, more manageable bites that he now serves in his pioneering do-it-yourself computer science program. 

The people who are attracted to these courses typically have a hacker mentality.

And because these materials are widely available and open-source, different people take them to very different and unpredictable directions.

The Minecraft community went bananas over this project, and Ben became an instant media celebrity. 

And indeed, for quite a few people, taking this NAND2Tetris pilgrimage, if you will, has turned into a life-changing experience.

For example, take Dan Rounds, who is a music and math major from East Lansing, Michigan.

A few weeks ago, Dan posted a victorious post on our website, and I'd like to read it to you.

So here's what Dan said. 

They are doing it because of one motivation only.

They have a tremendous passion to learn. 

And with that in mind, I'd like to say a few words about traditional college grading.

I'm sick of it.

And yet we don't tolerate mistakes, and we worship grades.

So for example, let's take area.

When you deal with a concept like area -- well, we also provide a set of tools that the child is invited to experiment with in order to learn.

And this little exercise here gives you a first good insight of the notion of area. 

Moving along, what about the area of this figure?

Well, if you try to tile it, it doesn't work too well, does it.

We don't replace teachers, by the way.

We believe that teachers should be empowered, not replaced. 

But we discovered it by self-exploration. 

And all this is something that a very young child can pick up using such mobile apps.

And because we cannot do it on our own, we've developed a very fancy authoring tool that any author, any parent or actually anyone who has an interest in math education, can use this authoring tool to develop similar apps on tablets without programming.

And finally, we are putting together an adaptive ecosystem that will match different learners with different apps according to their evolving learning style. 

