<!DOCTYPE html>

<html class="client-nojs" dir="ltr" lang="en">
<head>
<meta charset="utf-8"/>
<title>Duck typing - Wikipedia</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Duck_typing","wgTitle":"Duck typing","wgCurRevisionId":761563584,"wgRevisionId":761563584,"wgArticleId":440018,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles with Wayback Machine links","All articles with unsourced statements","Articles with unsourced statements from August 2015","Articles with example pseudocode","Articles with example Python code","Object-oriented programming","Type theory"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Duck_typing","wgRelevantArticleId":440018,"wgRequestId":"WIY7ywpAICsAAFBZvYcAAAAU","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{}},"wgStableRevisionId":null,"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":true},"wgRelatedArticles":null,"wgRelatedArticlesUseCirrusSearch":true,"wgRelatedArticlesOnlyUseCirrusSearch":false,"wgULSCurrentAutonym":"English","wgNoticeProject":"wikipedia","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgWikibaseItemId":"Q374282","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgEditSubmitButtonLabelPublish":false});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"loading","user.tokens":"loading","ext.pygments":"ready","ext.cite.styles":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.options@0j3lz3q",function($,jQuery,require,module){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/;

});mw.loader.load(["ext.cite.a11y","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.legacy.wikibits","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.watchlist-notice","ext.gadget.DRN-wizard","ext.gadget.charinsert","ext.gadget.refToolbar","ext.gadget.extra-toolbar-buttons","ext.gadget.switcher","ext.gadget.featured-articles-links","ext.centralauth.centralautologin","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","ext.centralNotice.geoIP","ext.centralNotice.startUp","skins.vector.js"]);});</script>
<link href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector" rel="stylesheet"/>
<script async="" src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta content="" name="ResourceLoaderDynamicStyles"/>
<link href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector" rel="stylesheet"/>
<meta content="MediaWiki 1.29.0-wmf.8" name="generator"/>
<meta content="origin-when-cross-origin" name="referrer"/>
<link href="android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Duck_typing" rel="alternate"/>
<link href="/w/index.php?title=Duck_typing&amp;action=edit" rel="alternate" title="Edit this page" type="application/x-wiki"/>
<link href="/w/index.php?title=Duck_typing&amp;action=edit" rel="edit" title="Edit this page"/>
<link href="/static/apple-touch/wikipedia.png" rel="apple-touch-icon"/>
<link href="/static/favicon/wikipedia.ico" rel="shortcut icon"/>
<link href="/w/opensearch_desc.php" rel="search" title="Wikipedia (en)" type="application/opensearchdescription+xml"/>
<link href="//en.wikipedia.org/w/api.php?action=rsd" rel="EditURI" type="application/rsd+xml"/>
<link href="//creativecommons.org/licenses/by-sa/3.0/" rel="copyright"/>
<link href="https://en.wikipedia.org/wiki/Duck_typing" rel="canonical"/>
<link href="//login.wikimedia.org" rel="dns-prefetch"/>
<link href="//meta.wikimedia.org" rel="dns-prefetch"/>
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Duck_typing rootpage-Duck_typing skin-vector action-view"> <div class="noprint" id="mw-page-base"></div>
<div class="noprint" id="mw-head-base"></div>
<div class="mw-body" id="content" role="main">
<a id="top"></a>
<div id="siteNotice"><!-- CentralNotice --></div>
<div class="mw-indicators">
</div>
<h1 class="firstHeading" id="firstHeading" lang="en">Duck typing</h1>
<div class="mw-body-content" id="bodyContent">
<div id="siteSub">From Wikipedia, the free encyclopedia</div>
<div id="contentSub"></div>
<div class="mw-jump" id="jump-to-nav">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
</div>
<div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="en"><script>function mfTempOpenSection(id){var block=document.getElementById("mf-section-"+id);block.className+=" open-block";block.previousSibling.className+=" open-block";}</script><table class="vertical-navbox nowraplinks" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;margin-top: 0.5em;">
<tr>
<th style="background-color: rgba(51, 153, 255, 0.15);;padding:0.2em 0.4em 0.2em;font-size:145%;line-height:1.2em"><a href="/wiki/Type_system" title="Type system">Type systems</a></th>
</tr>
<tr>
<th style="padding:0.1em;background-color: rgba(51, 153, 255, 0.15);">General concepts</th>
</tr>
<tr>
<td style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="/wiki/Type_safety" title="Type safety">Type safety</a></li>
</ul>
</td>
</tr>
<tr>
<th style="padding:0.1em;background-color: rgba(51, 153, 255, 0.15);">Major categories</th>
</tr>
<tr>
<td style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="/wiki/Type_system#Static_type_checking" title="Type system">Static</a> vs. <a href="/wiki/Type_system#Dynamic_type_checking_and_runtime_type_information" title="Type system">dynamic</a></li>
<li><a href="/wiki/Manifest_typing" title="Manifest typing">Manifest</a> vs. <a href="/wiki/Type_inference" title="Type inference">inferred</a></li>
<li><a href="/wiki/Nominal_type_system" title="Nominal type system">Nominal</a> vs. <a href="/wiki/Structural_type_system" title="Structural type system">structural</a></li>
<li><strong class="selflink">Duck typing</strong></li>
</ul>
</td>
</tr>
<tr>
<th style="padding:0.1em;background-color: rgba(51, 153, 255, 0.15);">Minor categories</th>
</tr>
<tr>
<td style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="/wiki/Dependent_type" title="Dependent type">Dependent</a></li>
<li><a href="/wiki/Flow-sensitive_typing" title="Flow-sensitive typing">Flow-sensitive</a></li>
<li><a href="/wiki/Gradual_typing" title="Gradual typing">Gradual</a></li>
<li><a href="/wiki/Latent_typing" title="Latent typing">Latent</a></li>
<li><a href="/wiki/Substructural_type_system" title="Substructural type system">Substructural</a></li>
<li><a href="/wiki/Uniqueness_type" title="Uniqueness type">Unique</a></li>
</ul>
</td>
</tr>
<tr>
<th style="padding:0.1em;background-color: rgba(51, 153, 255, 0.15);">See also</th>
</tr>
<tr>
<td style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="/wiki/Strong_and_weak_typing" title="Strong and weak typing">Strong and weak typing</a></li>
</ul>
</td>
</tr>
</table>
<p>In <a href="/wiki/Computer_programming" title="Computer programming">computer programming</a>, <b>duck typing</b> is an application of the <a href="/wiki/Duck_test" title="Duck test">duck test</a> in <a href="/wiki/Type_safety" title="Type safety">type safety</a>. It requires that <a class="mw-redirect" href="/wiki/Type_checking" title="Type checking">type checking</a> be deferred to <a href="/wiki/Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">runtime</a>, and is implemented by means of <a class="mw-redirect" href="/wiki/Dynamic_typing" title="Dynamic typing">dynamic typing</a> or <a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">reflection</a>.</p>
<p>Duck typing is concerned with establishing the suitability of an object for some purpose. With normal typing, suitability is assumed to be determined by an object's type only. In duck typing, an object's suitability is determined by the presence of certain <i><a href="/wiki/Method_(computer_programming)" title="Method (computer programming)">methods</a> and properties</i> (with appropriate meaning), rather than the actual type of the object.<sup class="noprint Inline-Template Template-Fact" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (August 2015)">citation needed</span></a></i>]</sup></p>
<p></p>
<div class="toc" id="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Concept_examples"><span class="tocnumber">1</span> <span class="toctext">Concept examples</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#In_statically_typed_languages"><span class="tocnumber">2</span> <span class="toctext">In statically typed languages</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Comparison_with_other_type_systems"><span class="tocnumber">3</span> <span class="toctext">Comparison with other type systems</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Structural_type_systems"><span class="tocnumber">3.1</span> <span class="toctext">Structural type systems</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Protocols_and_Interfaces"><span class="tocnumber">3.2</span> <span class="toctext">Protocols and Interfaces</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Templates_or_generic_types"><span class="tocnumber">3.3</span> <span class="toctext">Templates or generic types</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#Criticism"><span class="tocnumber">4</span> <span class="toctext">Criticism</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="#Criticism_of_the_term_itself"><span class="tocnumber">4.1</span> <span class="toctext">Criticism of the term itself</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#History"><span class="tocnumber">5</span> <span class="toctext">History</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Language_support"><span class="tocnumber">6</span> <span class="toctext">Language support</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="#In_C.23"><span class="tocnumber">6.1</span> <span class="toctext">In C#</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#In_C.2B.2B"><span class="tocnumber">6.2</span> <span class="toctext">In C++</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#In_CFML"><span class="tocnumber">6.3</span> <span class="toctext">In CFML</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#In_Dart"><span class="tocnumber">6.4</span> <span class="toctext">In Dart</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#In_Cobra"><span class="tocnumber">6.5</span> <span class="toctext">In Cobra</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#In_Common_Lisp"><span class="tocnumber">6.6</span> <span class="toctext">In Common Lisp</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#In_Go"><span class="tocnumber">6.7</span> <span class="toctext">In Go</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#In_Groovy"><span class="tocnumber">6.8</span> <span class="toctext">In Groovy</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#In_Java"><span class="tocnumber">6.9</span> <span class="toctext">In Java</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#In_JavaScript"><span class="tocnumber">6.10</span> <span class="toctext">In JavaScript</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#In_Julia"><span class="tocnumber">6.11</span> <span class="toctext">In Julia</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#In_Lua"><span class="tocnumber">6.12</span> <span class="toctext">In Lua</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#In_Objective-C"><span class="tocnumber">6.13</span> <span class="toctext">In Objective-C</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#In_Perl"><span class="tocnumber">6.14</span> <span class="toctext">In Perl</span></a></li>
<li class="toclevel-2 tocsection-25"><a href="#In_PHP"><span class="tocnumber">6.15</span> <span class="toctext">In PHP</span></a></li>
<li class="toclevel-2 tocsection-26"><a href="#In_PowerShell"><span class="tocnumber">6.16</span> <span class="toctext">In PowerShell</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#In_Python"><span class="tocnumber">6.17</span> <span class="toctext">In Python</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="#In_Ruby"><span class="tocnumber">6.18</span> <span class="toctext">In Ruby</span></a></li>
<li class="toclevel-2 tocsection-29"><a href="#In_Smalltalk"><span class="tocnumber">6.19</span> <span class="toctext">In Smalltalk</span></a></li>
<li class="toclevel-2 tocsection-30"><a href="#In_Typescript"><span class="tocnumber">6.20</span> <span class="toctext">In Typescript</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-31"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="#External_links"><span class="tocnumber">9</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Concept_examples">Concept examples</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=1" title="Edit section: Concept examples">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Consider the following <a href="/wiki/Pseudocode" title="Pseudocode">pseudo-code</a> for a duck-typed language:</p>
<pre>
<b>function</b> calculate(a, b, c) =&gt; <b>return</b> (a + b)*c

example1 = calculate (1, 2, 3)
example2 = calculate ([1], [2, 3], 2)
example3 = calculate ('apples ', 'and oranges, ', 3)

<b>print</b> <b>to_string</b> example1
<b>print</b> <b>to_string</b> example2
<b>print</b> <b>to_string</b> example3
</pre>
<p>In the example, each time the <tt>calculate</tt> function is called, objects without related inheritance may be used (numbers, lists and strings). As long as the objects support the "<tt>+</tt>" and "<tt>*</tt>" methods, the operation will succeed. If translated to <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> or <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, for example, the result of the code would be:</p>
<pre>
9
[1, 2, 3, 1, 2, 3]
apples and oranges, apples and oranges, apples and oranges,
</pre>
<p>Thus, duck typing can work the same as <a class="mw-redirect" href="/wiki/Type_polymorphism" title="Type polymorphism">polymorphism</a>, but without <a class="mw-redirect" href="/wiki/Inheritance_(computer_science)" title="Inheritance (computer science)">inheritance</a>. The only restriction that function <tt>calculate</tt> places on its arguments is that they implement the "<tt>+</tt>" and "<tt>*</tt>" methods.</p>
<p>The duck test can be seen in the following example (in Python). As far as the function <tt>in_the_forest</tt> is concerned, the <tt>Person</tt> object is a duck:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Duck</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"Quaaaaaack!"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">feathers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"The duck has white and gray feathers."</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"The person imitates a duck."</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">feathers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"The person takes a feather from the ground and shows it."</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"John Smith"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">in_the_forest</span><span class="p">(</span><span class="n">duck</span><span class="p">):</span>
    <span class="n">duck</span><span class="o">.</span><span class="n">quack</span><span class="p">()</span>
    <span class="n">duck</span><span class="o">.</span><span class="n">feathers</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">game</span><span class="p">():</span>
    <span class="n">donald</span> <span class="o">=</span> <span class="n">Duck</span><span class="p">()</span>
    <span class="n">john</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
    <span class="n">in_the_forest</span><span class="p">(</span><span class="n">donald</span><span class="p">)</span>
    <span class="n">in_the_forest</span><span class="p">(</span><span class="n">john</span><span class="p">)</span>

<span class="n">game</span><span class="p">()</span>
</pre></div>
<h2><span class="mw-headline" id="In_statically_typed_languages">In statically typed languages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=2" title="Edit section: In statically typed languages">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Certain usually <a href="/wiki/Type_system#Static_typing" title="Type system">statically typed</a> languages such as <a href="/wiki/Boo_(programming_language)" title="Boo (programming language)">Boo</a> and the version 4 release of <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a> have extra type annotations<sup class="reference" id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup><sup class="reference" id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup> that instruct the compiler to arrange for type checking of classes to occur at run-time rather than compile time, and include run-time type checking code in the compiled output.</p>
<h2><span class="mw-headline" id="Comparison_with_other_type_systems">Comparison with other type systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=3" title="Edit section: Comparison with other type systems">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Structural_type_systems">Structural type systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=4" title="Edit section: Structural type systems">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Duck typing is similar to, but distinct from <a href="/wiki/Structural_type_system" title="Structural type system">structural typing</a>. Structural typing is a <a href="/wiki/Type_system#Static_typing" title="Type system">static typing</a> system that determines type compatibility and equivalence by a type's structure, whereas duck typing is <a href="/wiki/Type_system#Dynamic_typing" title="Type system">dynamic</a> and determines type compatibility by only that part of a type's structure that is accessed during <a href="/wiki/Run_time_(program_lifecycle_phase)" title="Run time (program lifecycle phase)">run time</a>.</p>
<p>The <a href="/wiki/OCaml" title="OCaml">OCaml</a>, <a href="/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>, <a href="/wiki/Go_(programming_language)" title="Go (programming language)">Go</a>, <a href="/wiki/Elm_(programming_language)" title="Elm (programming language)">Elm</a>,<sup class="reference" id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup> and <a href="/wiki/Gosu_(programming_language)" title="Gosu (programming language)">Gosu</a> languages support structural typing to varying degrees.</p>
<h3><span class="mw-headline" id="Protocols_and_Interfaces">Protocols and Interfaces</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=5" title="Edit section: Protocols and Interfaces">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">Protocols and interfaces</a> can provide some of the benefits of duck typing, but duck typing is distinct in that no explicit interface is defined. For example, if a third party library implements a class that cannot be modified, a client cannot use an instance of it with an interface unknown to that library even if the class does in fact satisfy the interface requirements. (A common solution to this problem is the <a href="/wiki/Adapter_pattern" title="Adapter pattern">Adapter pattern</a>.) Duck typing would allow this. Again, all of an interface must be satisfied for compatibility.</p>
<h3><span class="mw-headline" id="Templates_or_generic_types">Templates or generic types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=6" title="Edit section: Templates or generic types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Template_metaprogramming" title="Template metaprogramming">Template</a>, or <a href="/wiki/Generic_programming" title="Generic programming">generic</a> functions or methods apply the duck test in a <a href="/wiki/Type_system#Static_typing" title="Type system">static typing</a> context; this brings all the advantages and disadvantages of <a href="/wiki/Type_system#Static_and_dynamic_type_checking_in_practice" title="Type system">static versus dynamic type checking</a> in general. Duck typing can also be more flexible in that only the methods <i>actually called at run time</i> need to be implemented, while templates require implementation of all methods that <i>cannot be proven <a href="/wiki/Unreachable_code" title="Unreachable code">unreachable</a> at compile time</i>.</p>
<p>Examples include the languages <a href="/wiki/C%2B%2B" title="C++">C++</a> and <a href="/wiki/D_(programming_language)" title="D (programming language)">D</a> with templates, which developed from <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> generics.</p>
<h2><span class="mw-headline" id="Criticism">Criticism</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=7" title="Edit section: Criticism">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Criticism_of_the_term_itself">Criticism of the term itself</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=8" title="Edit section: Criticism of the term itself">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Use of the term "duck typing" has been considered superfluous in light of the fact that other terms, such as <a href="/wiki/Late_binding" title="Late binding">dynamic binding</a>, express the concept more clearly.<sup class="reference" id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup> To proponents of <a class="mw-redirect" href="/wiki/Static_type_checking" title="Static type checking">static type checking</a>, duck typing suggests the <i>absence</i> of typing, making its incorporation of the term <i>typing</i> appear incoherent.</p>
<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=9" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p><a href="/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a> made an early (2000) use of the term in a <a class="external text" href="https://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en&amp;" rel="nofollow">message</a> to the comp.lang.python <a href="/wiki/Usenet_newsgroup" title="Usenet newsgroup">newsgroup</a>:</p>
<blockquote>
<p>In other words, don't check whether it IS-a duck: check whether it QUACKS-like-a duck, WALKS-like-a duck, etc, etc, depending on exactly what subset of duck-like behaviour you need to play your language-games with.</p>
</blockquote>
<h2><span class="mw-headline" id="Language_support">Language support</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=10" title="Edit section: Language support">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="In_C.23">In C#</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=11" title="Edit section: In C#">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>As of <a href="/wiki/C_Sharp_4.0" title="C Sharp 4.0">C# 4.0</a> the compiler and runtime collaborate to implement <a href="/wiki/C_Sharp_4.0#Dynamic_member_lookup" title="C Sharp 4.0">dynamic member lookup</a>.</p>
<p>In the following C# 6.0 code, the parameter <i>duck</i> of the method <i>Program.InTheForest</i> is declared as <b>dynamic</b>.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">using</span> <span class="nn">static</span> <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Duck</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="k">void</span> <span class="nf">Quack</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">WriteLine</span><span class="p">(</span><span class="s">"Quaaaaaack!"</span><span class="p">);</span>
	<span class="k">public</span> <span class="k">void</span> <span class="nf">Feathers</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">WriteLine</span><span class="p">(</span><span class="s">"The duck has white and gray feathers."</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="k">void</span> <span class="nf">Quack</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">WriteLine</span><span class="p">(</span><span class="s">"The person imitates a duck."</span><span class="p">);</span>
	<span class="k">public</span> <span class="k">void</span> <span class="nf">Feathers</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">WriteLine</span><span class="p">(</span><span class="s">"The person takes a feather from the ground and shows it."</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
	<span class="k">static</span> <span class="k">void</span> <span class="nf">InTheForest</span><span class="p">(</span><span class="kt">dynamic</span> <span class="n">duck</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">duck</span><span class="p">.</span><span class="n">Quack</span><span class="p">();</span>
		<span class="n">duck</span><span class="p">.</span><span class="n">Feathers</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="k">static</span> <span class="k">void</span> <span class="nf">Game</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Duck</span> <span class="n">donald</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Duck</span><span class="p">();</span>
		<span class="n">Person</span> <span class="n">john</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">();</span>
		<span class="n">InTheForest</span><span class="p">(</span><span class="n">donald</span><span class="p">);</span>
		<span class="n">InTheForest</span><span class="p">(</span><span class="n">john</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">Game</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
</pre></div>
<h3><span class="mw-headline" id="In_C.2B.2B">In C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=12" title="Edit section: In C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span>
<span class="k">class</span> <span class="nc">Duck</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">quack</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Quaaaaaack!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">feathers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The duck has white and gray feathers."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">quack</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The person imitates a duck."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">feathers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"The person takes a feather from the ground and shows it."</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="n">inTheForest</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">t</span><span class="p">.</span><span class="n">quack</span><span class="p">();</span>
    <span class="n">t</span><span class="p">.</span><span class="n">feathers</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Duck</span> <span class="n">donald</span><span class="p">;</span>
    <span class="n">Person</span> <span class="n">john</span><span class="p">;</span>
    
    <span class="n">inTheForest</span><span class="p">(</span><span class="n">donald</span><span class="p">);</span>
    <span class="n">inTheForest</span><span class="p">(</span><span class="n">john</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<h3><span class="mw-headline" id="In_CFML">In CFML</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=13" title="Edit section: In CFML">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The Web application scripting language <a class="mw-redirect" href="/wiki/CFML" title="CFML">CFML</a> allows function arguments to be specified as having type <i>any</i>. For this sort of argument, an arbitrary object can be passed in and method calls are bound dynamically at runtime. If an object does not implement a called method, a runtime exception is thrown that can be caught and handled gracefully. In ColdFusion 8, this can be picked up as a defined event onMissingMethod() rather than through an exception handler. An alternative argument type of <i>WEB-INF.cftags.component</i> restricts the passed argument to be a ColdFusion Component (CFC), which provides better error messages should a non-object be passed in.</p>
<p>Other CFML application servers such as <a href="/wiki/Lucee" title="Lucee">Lucee</a> work analogously to ColdFusion's CFML implementation.</p>
<h3><span class="mw-headline" id="In_Dart">In Dart</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=14" title="Edit section: In Dart">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Duck</span> <span class="p">{</span>
	<span class="n">quack</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"Quack, quack!"</span><span class="p">);</span>
	<span class="n">fly</span><span class="p">()</span>	<span class="o">=&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"Flap, Flap!"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
	<span class="n">quack</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"I'm Quackin'!"</span><span class="p">);</span>
	<span class="n">fly</span><span class="p">()</span>	<span class="o">=&gt;</span> <span class="n">print</span><span class="p">(</span><span class="s">"I'm Flyin'!"</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">inTheForest</span><span class="p">(</span><span class="n">mallard</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">mallard</span><span class="p">.</span><span class="n">quack</span><span class="p">();</span>
	<span class="n">mallard</span><span class="p">.</span><span class="n">fly</span><span class="p">();</span>
<span class="p">}</span>

<span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">inTheForest</span><span class="p">(</span><span class="k">new</span> <span class="n">Duck</span><span class="p">());</span>
	<span class="n">inTheForest</span><span class="p">(</span><span class="k">new</span> <span class="n">Person</span><span class="p">());</span>
<span class="p">}</span>
</pre></div>
<h3><span class="mw-headline" id="In_Cobra">In Cobra</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=15" title="Edit section: In Cobra">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In addition to static typing, <a href="/wiki/Cobra_(programming_language)" title="Cobra (programming language)">Cobra</a> allows one to declare objects of type 'dynamic' and send any message to them. At run-time the message passing will either succeed or throw an exception. The 'dynamic' type is the default for object variables and method arguments when a type has not been explicitly declared for them. This feature was inspired by <a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>.<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup></p>
<h3><span class="mw-headline" id="In_Common_Lisp">In Common Lisp</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=16" title="Edit section: In Common Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> includes an object-oriented system (<a href="/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a>, or shorter CLOS) providing classes with <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> and <a class="mw-redirect" href="/wiki/Generic_functions" title="Generic functions">generic functions</a> that can specialize on multiple arguments. The combination of CLOS and Lisp's dynamic typing make duck typing a common programming style in Common Lisp.</p>
<p>With Common Lisp one also does not need to query the types, since at runtime an error will be signaled when a generic function is not applicable. The error can be handled with the <a class="new" href="/w/index.php?title=Condition_system&amp;action=edit&amp;redlink=1" title="Condition system (page does not exist)">condition system</a> of Common Lisp. Methods are defined outside of classes and can also be defined for specific objects.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="c1">;; We describe a protocol for 'duck-like' objects. Objects with methods for</span>
<span class="c1">;; these three generic functions may be considered 'ducks', for all intents</span>
<span class="c1">;; and purposes -- regardless of their superclass.</span>
<span class="p">(</span><span class="nb">defgeneric</span> <span class="nv">quack</span> <span class="p">(</span><span class="nv">something</span><span class="p">))</span>
<span class="p">(</span><span class="nb">defgeneric</span> <span class="nv">feathers</span> <span class="p">(</span><span class="nv">something</span><span class="p">))</span>

<span class="c1">;; Implementation of the protocol for class DUCK.</span>
<span class="p">(</span><span class="nb">defclass</span> <span class="nv">duck</span> <span class="p">()</span> <span class="p">())</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">quack</span> <span class="p">((</span><span class="nv">a-duck</span> <span class="nv">duck</span><span class="p">))</span>
	<span class="p">(</span><span class="nb">print</span> <span class="s">"Quaaaaaack!"</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">feathers</span> <span class="p">((</span><span class="nv">a-duck</span> <span class="nv">duck</span><span class="p">))</span>
	<span class="p">(</span><span class="nb">print</span> <span class="s">"The duck has white and gray feathers."</span><span class="p">))</span>

<span class="c1">;; But we can also implement it for PERSON, without inheriting from DUCK.</span>
<span class="p">(</span><span class="nb">defclass</span> <span class="nv">person</span> <span class="p">()</span> <span class="p">())</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">quack</span> <span class="p">((</span><span class="nv">a-person</span> <span class="nv">person</span><span class="p">))</span>
	<span class="p">(</span><span class="nb">print</span> <span class="s">"The person imitates a duck."</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">feathers</span> <span class="p">((</span><span class="nv">a-person</span> <span class="nv">person</span><span class="p">))</span>
	<span class="p">(</span><span class="nb">print</span> <span class="s">"The person takes a feather from the ground and shows it."</span><span class="p">))</span>

<span class="c1">;; IN-THE-FOREST does not need to be polymorphic. Its 'duck' argument is</span>
<span class="c1">;; anything that implements the duck protocol above.</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">in-the-forest</span> <span class="p">(</span><span class="nv">duck</span><span class="p">)</span>
	<span class="p">(</span><span class="nv">quack</span> <span class="nv">duck</span><span class="p">)</span>
	<span class="p">(</span><span class="nv">feathers</span> <span class="nv">duck</span><span class="p">))</span>

<span class="c1">;; GAME can also just be a regular function.</span>
<span class="p">(</span><span class="nb">defun</span> <span class="nv">game</span> <span class="p">()</span>
	<span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">donald</span> <span class="p">(</span><span class="nb">make-instance</span> <span class="ss">'duck</span><span class="p">))</span>
		<span class="p">(</span><span class="nv">john</span> <span class="p">(</span><span class="nb">make-instance</span> <span class="ss">'person</span><span class="p">)))</span>
	<span class="p">(</span><span class="nv">in-the-forest</span> <span class="nv">donald</span><span class="p">)</span>
	<span class="p">(</span><span class="nv">in-the-forest</span> <span class="nv">john</span><span class="p">)))</span>

<span class="p">(</span><span class="nv">game</span><span class="p">)</span>
</pre></div>
<p>The usual development style of Common Lisp (by using a Lisp <a href="/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="Read–eval–print loop">REPL</a> like <a href="/wiki/SLIME" title="SLIME">SLIME</a>) allows also the interactive repair:</p>
<pre>
? <code class="mw-highlight" dir="ltr" id="" style=""><span class="p">(</span><span class="nb">defclass</span> <span class="nv">cat</span> <span class="p">()</span> <span class="p">())</span></code>
#&lt;STANDARD-CLASS CAT&gt;
? <code class="mw-highlight" dir="ltr" id="" style=""><span class="p">(</span><span class="nv">quack</span> <span class="p">(</span><span class="nb">make-instance</span> <span class="ss">'cat</span><span class="p">))</span></code>
&gt; Error: There is no applicable method for the generic function:
&gt;      #&lt;STANDARD-GENERIC-FUNCTION QUACK #x300041C2371F&gt;
&gt;    when called with arguments:
&gt;      (#&lt;CAT #x300041C7EEFD&gt;)
&gt; If continued: Try calling it again
1 &gt; <code class="mw-highlight" dir="ltr" id="" style=""><span class="p">(</span><span class="nb">defmethod</span> <span class="nv">quack</span> <span class="p">((</span><span class="nv">a-cat</span> <span class="nv">cat</span><span class="p">))</span></code>
                <code class="mw-highlight" dir="ltr" id="" style=""><span class="p">(</span><span class="nb">print</span> <span class="s">"The cat imitates a duck."</span><span class="p">))</span></code>

#&lt;STANDARD-METHOD QUACK (CAT)&gt;
1 &gt; <code class="mw-highlight" dir="ltr" id="" style=""><span class="p">(</span><span class="nb">continue</span><span class="p">)</span></code>

"The cat imitates a duck."
</pre>
<p>This way software can be developed by extending partially working duck typed code.</p>
<h3><span class="mw-headline" id="In_Go">In Go</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=17" title="Edit section: In Go">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In <a href="/wiki/Go_(programming_language)" title="Go (programming language)">Go</a>, any type that has the methods required for an interface can act as that interface, regardless of whether or not it was explicitly defined or intended. Because of this, multiple sources use the term duck typing when describing Go interfaces.<sup class="reference" id="cite_ref-6"><a href="#cite_note-6">[6]</a></sup><sup class="reference" id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup> However, Go typically checks for compatibility at compile-time, which is why the Go designers describe the interfaces as a form of structural typing.<sup class="reference" id="cite_ref-structural_typing_8-0"><a href="#cite_note-structural_typing-8">[8]</a></sup></p>
<p>Although in general duck typing can be implemented with <a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">reflection</a>, the support for reflection in Go is limited. Calling methods through reflection requires the use of interface type assertions.<sup class="reference" id="cite_ref-9"><a href="#cite_note-9">[9]</a></sup> The runtime validates that the underlying type of a value supports all methods defined in the given interface. In duck typing, the runtime validates each method invokation separately.</p>
<h3><span class="mw-headline" id="In_Groovy">In Groovy</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=18" title="Edit section: In Groovy">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In <a href="/wiki/Groovy_(programming_language)" title="Groovy (programming language)">Groovy</a>, the Java-derived scripting language, the below Java example can be greatly simplified, because Groovy uses duck typing by default when calling a method.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kd">class</span> <span class="nc">Duck</span>
<span class="o">{</span>
	<span class="kt">def</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"I'm a Duck, I can walk..."</span> <span class="o">}</span>
	<span class="kt">def</span> <span class="nf">swim</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"I'm a Duck, I can swim..."</span> <span class="o">}</span>
	<span class="kt">def</span> <span class="nf">quack</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"I'm a Duck, I can quack"</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Person</span>
<span class="o">{</span>
	<span class="kt">def</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"I'm a Person, I can walk..."</span> <span class="o">}</span>
	<span class="kt">def</span> <span class="nf">swim</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"I'm a Person, I can swim..."</span> <span class="o">}</span>
	<span class="kt">def</span> <span class="nf">talk</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">"I'm a Person, I can talk..."</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kt">def</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Duck</span><span class="o">()</span>
<span class="kt">def</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">()</span>
		
<span class="n">d</span><span class="o">.</span><span class="na">walk</span><span class="o">()</span>	<span class="c1">// Ok, duck has walk() method</span>
<span class="n">d</span><span class="o">.</span><span class="na">swim</span><span class="o">()</span>	<span class="c1">// Ok, duck has swim() method</span>
<span class="n">d</span><span class="o">.</span><span class="na">quack</span><span class="o">()</span>	<span class="c1">// Ok, duck has quack() method</span>

<span class="n">p</span><span class="o">.</span><span class="na">walk</span><span class="o">()</span>	<span class="c1">// Ok, person has walk() method</span>
<span class="n">p</span><span class="o">.</span><span class="na">swim</span><span class="o">()</span>	<span class="c1">// Ok, person has swim() method</span>
<span class="n">p</span><span class="o">.</span><span class="na">quack</span><span class="o">()</span>	<span class="c1">// Runtime error, no quack() method</span>
</pre></div>
<h3><span class="mw-headline" id="In_Java">In Java</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=19" title="Edit section: In Java">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> duck typing may be achieved with <a href="/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">reflection</a>.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DuckTyping</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">final</span> <span class="n">Duck</span> <span class="n">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Duck</span><span class="o">();</span>
		<span class="kd">final</span> <span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>

		<span class="k">try</span> <span class="o">{</span>
			<span class="n">actAsADuck</span><span class="o">(</span><span class="n">duck</span><span class="o">);</span>
			<span class="n">actAsADuck</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">NoSuchMethodException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Method not found: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Execution failed: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">actAsADuck</span><span class="o">(</span><span class="kd">final</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
		<span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">objClass</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
		<span class="n">objClass</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"walk"</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
		<span class="n">objClass</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"swim"</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
		<span class="n">objClass</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">"quack"</span><span class="o">).</span><span class="na">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Duck</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span>	<span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a Duck, I can walk..."</span><span class="o">);</span> <span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">swim</span><span class="o">()</span>	<span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a Duck, I can swim..."</span><span class="o">);</span> <span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">quack</span><span class="o">()</span>	<span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a Duck, I can quack..."</span><span class="o">);</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span>	<span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a Person, I can walk..."</span><span class="o">);</span> <span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">swim</span><span class="o">()</span>	<span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a Person, I can swim..."</span><span class="o">);</span> <span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">talk</span><span class="o">()</span>	<span class="o">{</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a Person, I can talk..."</span><span class="o">);</span> <span class="o">}</span>
<span class="o">}</span>
</pre></div>
<p>Running the DuckTyping class will produce the following output:</p>
<pre>
I'm a Duck, I can walk...
I'm a Duck, I can swim...
I'm a Duck, I can quack...
I'm a Person, I can walk...
I'm a Person, I can swim...
Method not found: Person.quack()
</pre>
<h3><span class="mw-headline" id="In_JavaScript">In JavaScript</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=20" title="Edit section: In JavaScript">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kd">function</span> <span class="nx">Duck</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Dynamically add functions to this object</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">quack</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">'Quaaaaaack!'</span><span class="p">);</span> <span class="p">};</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">feathers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">'The duck has white and gray feathers.'</span><span class="p">);</span> <span class="p">};</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Person</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Dynamically add functions to this object</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">quack</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">'The person imitates a duck.'</span><span class="p">);</span> <span class="p">};</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">feathers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">'The person takes a feather from the ground and shows it.'</span><span class="p">);</span> <span class="p">};</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">alert</span><span class="p">(</span><span class="s1">'John Smith'</span><span class="p">);</span> <span class="p">};</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">inTheForest</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">quack</span><span class="p">)</span>     <span class="c1">// Check that the .quack() function exists</span>
    <span class="nx">object</span><span class="p">.</span><span class="nx">quack</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">feathers</span><span class="p">)</span>  <span class="c1">// Check that the .feathers() function exists</span>
    <span class="nx">object</span><span class="p">.</span><span class="nx">feathers</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">game</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">donald</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Duck</span><span class="p">();</span>
  <span class="kd">var</span> <span class="nx">john</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
  <span class="nx">inTheForest</span><span class="p">(</span><span class="nx">donald</span><span class="p">);</span>
  <span class="nx">inTheForest</span><span class="p">(</span><span class="nx">john</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Execute upon page load</span>
<span class="nx">game</span><span class="p">();</span>
</pre></div>
<p>The function <code class="mw-highlight" dir="ltr" id="" style="">inTheForest()</code> above checks that the object passed to it has a member <code class="mw-highlight" dir="ltr" id="" style="">quack</code> and a member <code class="mw-highlight" dir="ltr" id="" style="">feathers</code> before attempting to invoke them. More explicit tests could also be made, wherein the runtime types of the members are also checked:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kd">function</span> <span class="nx">inTheForest</span><span class="p">(</span><span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">quack</span>  <span class="o">&amp;&amp;</span>  <span class="k">typeof</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">quack</span><span class="p">)</span> <span class="o">==</span> <span class="s1">'function'</span><span class="p">)</span>        <span class="c1">// Check that the .quack() function exists</span>
    <span class="nx">object</span><span class="p">.</span><span class="nx">quack</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">feathers</span>  <span class="o">&amp;&amp;</span>  <span class="k">typeof</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">feathers</span><span class="p">)</span> <span class="o">==</span> <span class="s1">'function'</span><span class="p">)</span>  <span class="c1">// Check that the .feathers() function exists</span>
    <span class="nx">object</span><span class="p">.</span><span class="nx">feathers</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
<h3><span class="mw-headline" id="In_Julia">In Julia</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=21" title="Edit section: In Julia">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a> uses <a href="/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a>, <a href="/wiki/Generic_function" title="Generic function">generic functions</a>, optional <a href="/wiki/Type_signature" title="Type signature">type annotations</a> and automatic <a href="/wiki/Type_inference" title="Type inference">type inference</a> by default, the type <tt>Any</tt> is the super-type of the whole hierarchy.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">type</span><span class="nc"> Duck</span> <span class="k">end</span>

<span class="k">type</span><span class="nc"> Person</span>
    <span class="n">name</span><span class="p">::</span><span class="n">ASCIIString</span>
<span class="k">end</span>

<span class="n">quack</span><span class="p">(</span><span class="n">x</span><span class="p">::</span><span class="n">Duck</span><span class="p">)</span> <span class="o">=</span> <span class="n">println</span><span class="p">(</span><span class="s">"Quaaaaaack!"</span><span class="p">)</span>
<span class="n">quack</span><span class="p">(</span><span class="n">x</span><span class="p">::</span><span class="n">Person</span><span class="p">)</span> <span class="o">=</span> <span class="n">println</span><span class="p">(</span><span class="s">"The person imitates a duck."</span><span class="p">)</span>

<span class="n">feathers</span><span class="p">(</span><span class="n">x</span><span class="p">::</span><span class="n">Duck</span><span class="p">)</span> <span class="o">=</span> <span class="n">println</span><span class="p">(</span><span class="s">"The duck has white and gray feathers."</span><span class="p">)</span>
<span class="n">feathers</span><span class="p">(</span><span class="n">x</span><span class="p">::</span><span class="n">Person</span><span class="p">)</span> <span class="o">=</span> <span class="n">println</span><span class="p">(</span><span class="s">"The person takes a feather from the ground and shows it."</span><span class="p">)</span>

<span class="n">name</span><span class="p">(</span><span class="n">x</span><span class="p">::</span><span class="n">Person</span><span class="p">)</span> <span class="o">=</span> <span class="n">println</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>

<span class="k">function</span><span class="nf"> in_the_forest</span><span class="p">(</span><span class="n">duck</span><span class="p">)</span>    <span class="c"># same as duck::Any</span>
    <span class="n">quack</span><span class="p">(</span><span class="n">duck</span><span class="p">)</span>
    <span class="n">feathers</span><span class="p">(</span><span class="n">duck</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">function</span><span class="nf"> game</span><span class="p">()</span>
    <span class="n">donald</span> <span class="o">=</span> <span class="n">Duck</span><span class="p">()</span>
    <span class="n">john</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">"John Smith"</span><span class="p">)</span>

    <span class="n">in_the_forest</span><span class="p">(</span><span class="n">donald</span><span class="p">)</span>
    <span class="n">in_the_forest</span><span class="p">(</span><span class="n">john</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">game</span><span class="p">()</span>
</pre></div>
<h3><span class="mw-headline" id="In_Lua">In Lua</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=22" title="Edit section: In Lua">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a> supports duck typing as part of the <a href="/wiki/Lua_(programming_language)#Object-oriented_programming" title="Lua (programming language)">Metatable</a> weak-typing system. Any reference to a table's member function is checked dynamically at run-time. If an object does not implement the requested function, a run-time error is produced. If a data member is requested, but does not exist, a <a href="/wiki/Pointer_(computer_programming)#Null_pointer" title="Pointer (computer programming)">nil</a> value is returned.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kd">local</span> <span class="n">duck_mt</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">local</span> <span class="n">duck_methods</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">duck_mt</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">duck_methods</span>

<span class="k">function</span> <span class="nf">duck_methods</span><span class="p">:</span><span class="n">quack</span><span class="p">()</span>
	<span class="nb">print</span> <span class="s2">"</span><span class="s">Quaaaaaack!"</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">duck_methods</span><span class="p">:</span><span class="n">feathers</span><span class="p">()</span>
	<span class="k">return</span> <span class="s2">"</span><span class="s">The duck has white and gray feathers."</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">new_duck</span><span class="p">()</span>
	<span class="k">return</span> <span class="nb">setmetatable</span><span class="p">({},</span> <span class="n">duck_mt</span><span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">person_mt</span> <span class="o">=</span> <span class="p">{}</span>
<span class="kd">local</span> <span class="n">person_methods</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">person_mt</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">person_methods</span>

<span class="k">function</span> <span class="nf">person_methods</span><span class="p">:</span><span class="n">quack</span><span class="p">()</span>
	<span class="nb">print</span> <span class="s2">"</span><span class="s">The person imitates a duck."</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">person_methods</span><span class="p">:</span><span class="n">feathers</span><span class="p">()</span>
	<span class="k">return</span> <span class="s2">"</span><span class="s">The person takes a feather from the ground and shows it."</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">person_methods</span><span class="p">:</span><span class="n">get_name</span><span class="p">()</span>
	<span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">firstname</span> <span class="o">..</span> <span class="s2">"</span><span class="s"> "</span> <span class="o">..</span> <span class="n">self</span><span class="p">.</span><span class="n">lastname</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">new_person</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
	<span class="k">return</span> <span class="nb">setmetatable</span><span class="p">(</span><span class="n">t</span> <span class="ow">or</span> <span class="p">{},</span> <span class="n">person_mt</span><span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">in_the_forest</span><span class="p">(</span><span class="n">duck</span><span class="p">)</span>
	<span class="n">duck</span><span class="p">:</span><span class="n">quack</span><span class="p">()</span>
	<span class="nb">print</span><span class="p">(</span><span class="n">duck</span><span class="p">:</span><span class="n">feathers</span><span class="p">())</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">donald</span> <span class="o">=</span> <span class="n">new_duck</span><span class="p">()</span>
<span class="kd">local</span> <span class="n">john</span> <span class="o">=</span> <span class="n">new_person</span> <span class="p">{</span><span class="n">firstname</span><span class="o">=</span><span class="s2">"</span><span class="s">John"</span><span class="p">,</span> <span class="n">lastname</span><span class="o">=</span><span class="s2">"</span><span class="s">Smith"</span><span class="p">}</span>
<span class="n">in_the_forest</span><span class="p">(</span><span class="n">donald</span><span class="p">)</span>
<span class="n">in_the_forest</span><span class="p">(</span><span class="n">john</span><span class="p">)</span>
</pre></div>
<p>Output:</p>
<pre>
Quaaaaaack!
The duck has white and gray feathers.
The person imitates a duck.
The person takes a feather from the ground and shows it.
</pre>
<h3><span class="mw-headline" id="In_Objective-C">In Objective-C</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=23" title="Edit section: In Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>, a cross between <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>, allows one to declare objects of type 'id' and send any message to them (provided the method is declared somewhere), like in Smalltalk. The sender can test an object to see, if it responds to a message, the object can decide at the time of the message whether it will respond to it or not, and, if the sender sends a message a recipient cannot respond to, an exception is raised. Thus, duck typing is fully supported by Objective-C.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="p">@</span><span class="n">import</span> <span class="n">Foundation</span><span class="p">;</span>

<span class="k">@interface</span> <span class="nc">Duck</span> : <span class="bp">NSObject</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Duck</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">quack</span> <span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Quaaaack!"</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">Person</span> : <span class="bp">NSObject</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Person</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">quack</span> <span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@"The person imitates a duck."</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">Dog</span> : <span class="bp">NSObject</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Dog</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bark</span> <span class="p">{</span> <span class="n">NSLog</span><span class="p">(</span><span class="s">@"Baaaaark!"</span><span class="p">);</span> <span class="p">}</span>
<span class="k">@end</span>

<span class="kt">void</span> <span class="n">inTheForest</span><span class="p">(</span><span class="kt">id</span> <span class="n">duck</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">duck</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">quack</span><span class="p">)])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">duck</span> <span class="n">quack</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="k">@autoreleasepool</span> <span class="p">{</span>
        <span class="n">inTheForest</span><span class="p">([[</span><span class="n">Duck</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]);</span>
        <span class="n">inTheForest</span><span class="p">([[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]);</span>
        <span class="n">inTheForest</span><span class="p">([[</span><span class="n">Dog</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Output:</p>
<pre>
Quaaaack!
The person imitates a duck.
</pre>
<h3><span class="mw-headline" id="In_Perl">In Perl</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=24" title="Edit section: In Perl">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/Perl" title="Perl">Perl</a> looks for method definitions in package set with <tt>bless</tt> function.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>

<span class="nb">package</span> <span class="n">Duck</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">hatch</span> <span class="p">{</span>
	<span class="nb">bless</span> <span class="o">\</span><span class="p">(</span><span class="k">my</span> <span class="nv">$self</span><span class="p">),</span> <span class="nb">shift</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">quack</span> <span class="p">{</span>
	<span class="k">print</span> <span class="s">"Quaaaaaack!\n"</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">feathers</span> <span class="p">{</span>
	<span class="k">print</span> <span class="s">"The duck has white and gray feathers.\n"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">package</span> <span class="n">Person</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">accept_birth</span> <span class="p">{</span>
	<span class="nb">bless</span> <span class="o">\</span><span class="p">(</span><span class="k">my</span> <span class="nv">$self</span><span class="p">),</span> <span class="nb">shift</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">quack</span> <span class="p">{</span>
	<span class="k">print</span> <span class="s">"The person imitates a duck.\n"</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">feathers</span> <span class="p">{</span>
	<span class="k">print</span> <span class="s">"The person takes a feather from the ground and shows it.\n"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nb">package</span> <span class="n">main</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">in_the_forest</span>
<span class="p">{</span>
	<span class="k">my</span> <span class="nv">$duck</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
	<span class="nv">$duck</span><span class="o">-&gt;</span><span class="n">quack</span><span class="p">();</span>
	<span class="nv">$duck</span><span class="o">-&gt;</span><span class="n">feathers</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$duck</span> <span class="o">=</span> <span class="n">Duck</span><span class="o">-&gt;</span><span class="n">hatch</span><span class="p">();</span>
<span class="k">my</span> <span class="nv">$person</span> <span class="o">=</span> <span class="n">Person</span><span class="o">-&gt;</span><span class="n">accept_birth</span><span class="p">();</span>

<span class="n">in_the_forest</span><span class="p">(</span> <span class="nv">$duck</span> <span class="p">);</span>
<span class="n">in_the_forest</span><span class="p">(</span> <span class="nv">$person</span> <span class="p">);</span>
</pre></div>
<p>Output:</p>
<pre>
Quaaaaaack!
The duck has white and gray feathers.
The person imitates a duck.
The person takes a feather from the ground and shows it.
</pre>
<h3><span class="mw-headline" id="In_PHP">In PHP</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=25" title="Edit section: In PHP">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/PHP" title="PHP">PHP</a> leans towards the Java convention of using inheritance and the user land type system (type hinting method arguments or using instanceof class or interface) in favour of duck typing. Below is an example of duck typing:<br/></p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Duck</span> <span class="p">{</span>
    <span class="k">function</span> <span class="nf">quack</span><span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">"Quack"</span><span class="p">,</span> <span class="nx">PHP_EOL</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">function</span> <span class="nf">fly</span><span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">"Flap, Flap"</span><span class="p">,</span> <span class="nx">PHP_EOL</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Person</span> <span class="p">{</span>
    <span class="k">function</span> <span class="nf">quack</span><span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">"I try to imitate a duck quack"</span><span class="p">,</span> <span class="nx">PHP_EOL</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">function</span> <span class="nf">fly</span><span class="p">()</span> <span class="p">{</span> <span class="k">echo</span> <span class="s2">"I take an airplane"</span><span class="p">,</span> <span class="nx">PHP_EOL</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">in_the_forest</span><span class="p">(</span><span class="nv">$object</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$object</span><span class="o">-&gt;</span><span class="na">quack</span><span class="p">();</span>
    <span class="nv">$object</span><span class="o">-&gt;</span><span class="na">fly</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">in_the_forest</span><span class="p">(</span><span class="k">new</span> <span class="nx">Duck</span><span class="p">);</span>
<span class="nx">in_the_forest</span><span class="p">(</span><span class="k">new</span> <span class="nx">Person</span><span class="p">);</span>
</pre></div>
<p>Output:</p>
<pre>
Quack
Flap, Flap
I try to imitate a duck quack
I take an airplane
</pre>
<h3><span class="mw-headline" id="In_PowerShell">In <a href="/wiki/PowerShell" title="PowerShell">PowerShell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=26" title="Edit section: In PowerShell">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>This is the concept example from the beginning of the page.</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">Function</span> <span class="n">calculate</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nv">$a</span> <span class="p">+</span> <span class="nv">$b</span><span class="p">)*</span><span class="nv">$c</span>
<span class="p">}</span>
</pre></div>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="gp">PS  &gt; </span><span class="n">calculate</span> <span class="n">1</span> <span class="n">2</span> <span class="n">3</span>
<span class="go">9</span>
<span class="gp">PS  &gt; </span><span class="s2">"</span><span class="p">$(</span><span class="n">calculate</span> <span class="p">(</span><span class="n">1</span><span class="p">,</span> <span class="n">2</span><span class="p">,</span> <span class="n">3</span><span class="p">)</span> <span class="p">(</span><span class="n">4</span><span class="p">,</span> <span class="n">5</span><span class="p">,</span> <span class="n">6</span><span class="p">)</span> <span class="n">2</span><span class="p">)</span><span class="s2">"</span>
<span class="go">1 2 3 4 5 6 1 2 3 4 5 6</span>
<span class="gp">PS  &gt; </span><span class="n">calculate</span> <span class="s1">'apples '</span> <span class="s1">'and oranges, '</span> <span class="n">3</span>
<span class="go">apples and oranges, apples and oranges, apples and oranges,</span>
</pre></div>
<h3><span class="mw-headline" id="In_Python">In Python</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=27" title="Edit section: In Python">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Duck typing is heavily used in <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, with the canonical example being file-like classes (for example, <tt><a class="external text" href="https://docs.python.org/2/library/stringio.html#module-cStringIO" rel="nofollow">cStringIO</a></tt> allows a Python string to be treated as a file).</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Duck</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"Quack, quack!"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">fly</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"Flap, Flap!"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"I'm Quackin'!"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">fly</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">"I'm Flyin'!"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">in_the_forest</span><span class="p">(</span><span class="n">mallard</span><span class="p">):</span>
    <span class="n">mallard</span><span class="o">.</span><span class="n">quack</span><span class="p">()</span>
    <span class="n">mallard</span><span class="o">.</span><span class="n">fly</span><span class="p">()</span>

<span class="n">in_the_forest</span><span class="p">(</span><span class="n">Duck</span><span class="p">())</span>
<span class="n">in_the_forest</span><span class="p">(</span><span class="n">Person</span><span class="p">())</span>
</pre></div>
<p>Output:</p>
<pre>
Quack, quack!
Flap, Flap!
I'm Quackin'!
I'm Flyin'!
</pre>
<p>According to the <a href="/wiki/Python_syntax_and_semantics#Exceptions" title="Python syntax and semantics">EAFP</a> principle, instead of checking to see, if some purportedly Duck-like object has a <i>quack()</i> method (using <tt>if hasattr(mallard, "quack"): ...</tt>), it's usually preferable to wrap the attempted quack with proper <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a>:</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">try</span><span class="p">:</span>
    <span class="n">mallard</span><span class="o">.</span><span class="n">quack</span><span class="p">()</span>
<span class="k">except</span> <span class="p">(</span><span class="ne">AttributeError</span><span class="p">,</span> <span class="ne">TypeError</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s2">"mallard can't quack()"</span><span class="p">)</span>
</pre></div>
<p>Or, a more common use of the principle is to just let the exception "bubble up", that is, to let the exception be raised, and let whatever function or method called the code in question deal with it (or, if nothing deals with it, to let the exception be raised to the user). This gives better feedback on bad input, and avoids masking bugs.</p>
<h3><span class="mw-headline" id="In_Ruby">In Ruby</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=28" title="Edit section: In Ruby">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="k">class</span> <span class="nc">Duck</span>
  <span class="k">def</span> <span class="nf">quack</span>
    <span class="nb">puts</span> <span class="s2">"Quaaaaaack!"</span>
  <span class="k">end</span>
	
  <span class="k">def</span> <span class="nf">feathers</span>
    <span class="nb">puts</span> <span class="s2">"The duck has white and gray feathers."</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Person</span>
  <span class="k">def</span> <span class="nf">quack</span>
    <span class="nb">puts</span> <span class="s2">"The person imitates a duck."</span>
  <span class="k">end</span>
	
  <span class="k">def</span> <span class="nf">feathers</span>
    <span class="nb">puts</span> <span class="s2">"The person takes a feather from the ground and shows it."</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">in_the_forest</span><span class="p">(</span><span class="n">duck</span><span class="p">)</span>
  <span class="n">duck</span><span class="o">.</span><span class="n">quack</span>
  <span class="n">duck</span><span class="o">.</span><span class="n">feathers</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">game</span>
  <span class="n">donald</span> <span class="o">=</span> <span class="no">Duck</span><span class="o">.</span><span class="n">new</span>
  <span class="n">john</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
  <span class="n">in_the_forest</span> <span class="n">donald</span>
  <span class="n">in_the_forest</span> <span class="n">john</span>
<span class="k">end</span>

<span class="n">game</span>
</pre></div>
<p>Output:</p>
<pre>
Quaaaaaack!
The duck has white and gray feathers.
The person imitates a duck.
The person takes a feather from the ground and shows it.
</pre>
<h3><span class="mw-headline" id="In_Smalltalk">In Smalltalk</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=29" title="Edit section: In Smalltalk">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Duck typing is fundamental to <a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>. Variables have no data type, and can hold any object. Behavior is triggered by messages sent between objects. Any arbitrary string can be sent to any object as a message. The receiving object checks its method list for a matching behavior. This is the only approximation of type-checking in the language.</p>
<p>Moreover, a message with no matching method is not necessarily an error. In this case, the receiving object triggers its own doesNotUnderstand: method, inherited from Object. The default implementation raises an error, but this can be overridden to perform arbitrary operations based on the original message.</p>
<h3><span class="mw-headline" id="In_Typescript">In Typescript</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=30" title="Edit section: In Typescript">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a class="mw-redirect" href="/wiki/Typescript" title="Typescript">Typescript</a> is unusual, in that it is a statically-typed language that uses duck-typing pervasively at compile time. Compile-time type checking is always based on type signatures, never inheritance. Run time type checking is done using the "instanceof" operator, which is not duck-typed.</p>
<p>This is similar to Go's "structural typing", but it applies to both classes and interfaces. Unlike Go, Typescript has an "implements" keyword to declare that a type should implement a particular interface. It is not required—if a class implements all the members of interface IFoo, it can be used as an IFoo. An explicit "implements" keyword provides compile-time errors, if a developer fails to correctly implement an interface that he or she had intended to.</p>
<p>In the following example, it is legal to assign a Seagull object to a Duck variable, even though neither class inherits from the other. Because Seagull implements both talk() and swim() methods, it can be used as a Duck. A Parrot object cannot be assigned to a Duck variable because it does not implement any swim() method. A Fish object cannot be assigned to a Duck variable. Even though it implements both talk() and swim() methods, the talk() method has the wrong signature (returning a void rather than a string).</p>
<div class="mw-highlight mw-content-ltr" dir="ltr">
<pre>
<span class="kr">class</span> <span class="nx">Duck</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">talk</span><span class="p">()</span><span class="o">:</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">"Quack!"</span><span class="p">;</span> <span class="p">}</span>
    <span class="kr">public</span> <span class="nx">swim</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"swimming"</span><span class="p">);</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Seagull</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">talk</span><span class="p">()</span><span class="o">:</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">"Screech!"</span><span class="p">;</span> <span class="p">}</span>
    <span class="kr">public</span> <span class="nx">swim</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"swimming"</span><span class="p">);</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Parrot</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">talk</span><span class="p">()</span><span class="o">:</span> <span class="kt">string</span> <span class="p">{</span> <span class="k">return</span> <span class="s2">"Polly wants a cracker!"</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Fish</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">talk</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
    <span class="kr">public</span> <span class="nx">swim</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"swimming"</span><span class="p">);</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">duck</span>: <span class="kt">Duck</span><span class="p">;</span>

<span class="c1">// OK</span>
<span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Duck</span><span class="p">();</span>

<span class="c1">// OK</span>
<span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Seagull</span><span class="p">();</span>

<span class="c1">// Compile time error: Type 'Parrot' is not assignable to type 'Duck'.</span>
<span class="c1">// Property 'swim' is missing in type 'Parrot'.</span>
<span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parrot</span><span class="p">();</span>

<span class="c1">// Compile time error: Type 'Fish' is not assignable to type 'Duck'.</span>
<span class="c1">// Type '() =&gt; void' is not assignable to type '() =&gt; string'.</span>
<span class="nx">duck</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Fish</span><span class="p">();</span>
</pre></div>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=31" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a class="mw-redirect" href="/wiki/Extension_methods" title="Extension methods">Extension methods</a></li>
<li><a class="mw-redirect" href="/wiki/UFCS" title="UFCS">UFCS</a></li>
<li><a href="/wiki/Loose_coupling" title="Loose coupling">Loose coupling</a></li>
<li><a class="mw-redirect" href="/wiki/Monkey_patching" title="Monkey patching">Monkey patching</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=32" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><a class="external text" href="http://boo.codehaus.org/Duck+Typing" rel="nofollow">Boo: Duck Typing</a> <a class="external text" href="https://web.archive.org/web/20081006075246/http://boo.codehaus.org/Duck+Typing" rel="nofollow">Archived</a> October 6, 2008, at the <a href="/wiki/Wayback_Machine" title="Wayback Machine">Wayback Machine</a>.</span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><a class="external text" href="http://blogs.msdn.com/ericwhite/archive/2008/10/29/anders-hejlsberg-introduces-c-4-0-at-pdc-2008.aspx" rel="nofollow">Anders Hejlsberg Introduces C# 4.0 at PDC 2008</a></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><a class="external free" href="http://guide.elm-lang.org/core_language.html" rel="nofollow">http://guide.elm-lang.org/core_language.html</a></span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><cite class="citation web">Lippert, Eric (2 Jan 2014). <a class="external text" href="https://ericlippert.com/2014/01/02/what-is-duck-typing/comment-page-1/" rel="nofollow">"What is "duck typing"?"</a>. <i>Fabulous adventures in coding</i><span class="reference-accessdate">. Retrieved <span class="nowrap">25 May</span> 2016</span>. <q>... the whole idea of duck typing is fundamentally incoherent ...'</q></cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADuck+typing&amp;rft.atitle=What+is+%22duck+typing%22%3F&amp;rft.aufirst=Eric&amp;rft.aulast=Lippert&amp;rft.date=2014-01-02&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fericlippert.com%2F2014%2F01%2F02%2Fwhat-is-duck-typing%2Fcomment-page-1%2F&amp;rft.jtitle=Fabulous+adventures+in+coding&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="http://cobra-language.com/docs/acknowledgements/" rel="nofollow">"Cobra - Acknowledgements"</a>. cobra-language.com<span class="reference-accessdate">. Retrieved <span class="nowrap">2010-04-07</span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADuck+typing&amp;rft.btitle=Cobra+-+Acknowledgements&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fcobra-language.com%2Fdocs%2Facknowledgements%2F&amp;rft.pub=cobra-language.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text"><cite class="citation web">Diggins, Christopher (2009-11-24). <a class="external text" href="http://www.drdobbs.com/architecture-and-design/duck-typing-and-the-go-programming-langu/228701527" rel="nofollow">"Duck Typing and the Go Programming Language"</a>. <a href="/wiki/Dr._Dobb%27s_Journal" title="Dr. Dobb's Journal">Dr. Dobb's</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2016-03-10</span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADuck+typing&amp;rft.aufirst=Christopher&amp;rft.aulast=Diggins&amp;rft.btitle=Duck+Typing+and+the+Go+Programming+Language&amp;rft.date=2009-11-24&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fwww.drdobbs.com%2Farchitecture-and-design%2Fduck-typing-and-the-go-programming-langu%2F228701527&amp;rft.pub=Dr.+Dobb%27s&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><cite class="citation web">Ryer, Mat (2015-12-01). <a class="external text" href="https://medium.com/@matryer/golang-advent-calendar-day-one-duck-typing-a513aaed544d#.ebm7j81xu" rel="nofollow">"Duck typing in Go"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2016-03-10</span></span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADuck+typing&amp;rft.aufirst=Mat&amp;rft.aulast=Ryer&amp;rft.btitle=Duck+typing+in+Go&amp;rft.date=2015-12-01&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fmedium.com%2F%40matryer%2Fgolang-advent-calendar-day-one-duck-typing-a513aaed544d%23.ebm7j81xu&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-structural_typing-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-structural_typing_8-0">^</a></b></span> <span class="reference-text"><cite class="citation web"><a class="external text" href="https://golang.org/doc/faq#implements_interface" rel="nofollow">"Why doesn't Go have "implements" declarations?"</a>. <i>golang.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">1 October</span> 2015</span>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADuck+typing&amp;rft.atitle=Why+doesn%27t+Go+have+%22implements%22+declarations%3F&amp;rft.genre=unknown&amp;rft_id=https%3A%2F%2Fgolang.org%2Fdoc%2Ffaq%23implements_interface&amp;rft.jtitle=golang.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><cite class="citation web">Rob Pike. <a class="external text" href="http://blog.golang.org/laws-of-reflection" rel="nofollow">"The Laws of Reflection"</a>. <i>golang.org</i>.</cite><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ADuck+typing&amp;rft.atitle=The+Laws+of+Reflection&amp;rft.au=Rob+Pike&amp;rft.genre=unknown&amp;rft_id=http%3A%2F%2Fblog.golang.org%2Flaws-of-reflection&amp;rft.jtitle=golang.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal"><span style="display:none;"> </span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Duck_typing&amp;action=edit&amp;section=33" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a class="external text" href="http://commons.apache.org/proxy" rel="nofollow">Apache Software Foundation "commons" proxy project</a> provides DuckTyping implementation in Java</li>
<li><a class="external text" href="http://www.ddj.com/cpp/184401971" rel="nofollow">Dr. Dobbs June 01 2005: "Templates and Duck Typing"</a></li>
<li><a class="external text" href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/78502" rel="nofollow">Duck Typing: Ruby</a></li>
<li><a class="external text" href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/100511" rel="nofollow">How to duck type? - the psychology of static typing in Ruby</a></li>
<li><a class="external text" href="http://bigdingus.com/2007/12/08/just-what-is-this-javascript-object-you-handed-me/" rel="nofollow">Javascript 'typeof' limitations and duck typing</a></li>
<li><a class="external text" href="https://docs.python.org/glossary.html#term-duck-typing" rel="nofollow">Python documentation glossary entry on duck-typing</a></li>
<li><a class="external text" href="http://blog.dhananjaynene.com/2008/09/python-from-java-how-duck-typing-influences-class-design-and-design-principles/" rel="nofollow">Python from a Java perspective - Part 2 - How duck typing influences class design and design principles</a></li>
</ul>
<!-- 
NewPP limit report
Parsed by mw1214
Cached time: 20170123172150
Cache expiry: 2592000
Dynamic content: false
CPU time usage: 0.164 seconds
Real time usage: 0.204 seconds
Preprocessor visited node count: 920/1000000
Preprocessor generated node count: 0/1500000
Post‐expand include size: 16030/2097152 bytes
Template argument size: 647/2097152 bytes
Highest expansion depth: 11/40
Expensive parser function count: 1/500
Lua time usage: 0.068/10.000 seconds
Lua memory usage: 2.98 MB/50 MB
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  155.866      1 -total
 49.78%   77.594      1 Template:Reflist
 38.86%   60.575      6 Template:Cite_web
 24.64%   38.403      1 Template:Citation_needed
 21.23%   33.083      1 Template:Fix
 13.51%   21.055      1 Template:Type_systems
 13.27%   20.679      2 Template:Category_handler
 12.40%   19.320      1 Template:Sidebar
  6.43%   10.028      1 Template:Delink
  3.28%    5.116      8 Template:Code
-->
<!-- Saved in parser cache with key enwiki:pcache:idhash:440018-0!*!0!!en!*!* and timestamp 20170123172150 and revision id 761563584
 -->
<noscript><img alt="" height="1" src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" style="border: none; position: absolute;" title="" width="1"/></noscript></div> <div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Duck_typing&amp;oldid=761563584">https://en.wikipedia.org/w/index.php?title=Duck_typing&amp;oldid=761563584</a>"					</div>
<div class="catlinks" data-mw="interface" id="catlinks"><div class="mw-normal-catlinks" id="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="/wiki/Category:Object-oriented_programming" title="Category:Object-oriented programming">Object-oriented programming</a></li><li><a href="/wiki/Category:Type_theory" title="Category:Type theory">Type theory</a></li></ul></div><div class="mw-hidden-catlinks mw-hidden-cats-hidden" id="mw-hidden-catlinks">Hidden categories: <ul><li><a href="/wiki/Category:Articles_with_Wayback_Machine_links" title="Category:Articles with Wayback Machine links">Articles with Wayback Machine links</a></li><li><a href="/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="/wiki/Category:Articles_with_unsourced_statements_from_August_2015" title="Category:Articles with unsourced statements from August 2015">Articles with unsourced statements from August 2015</a></li><li><a href="/wiki/Category:Articles_with_example_pseudocode" title="Category:Articles with example pseudocode">Articles with example pseudocode</a></li><li><a href="/wiki/Category:Articles_with_example_Python_code" title="Category:Articles with example Python code">Articles with example Python code</a></li></ul></div></div> <div class="visualClear"></div>
</div>
</div>
<div id="mw-navigation">
<h2>Navigation menu</h2>
<div id="mw-head">
<div aria-labelledby="p-personal-label" class="" id="p-personal" role="navigation">
<h3 id="p-personal-label">Personal tools</h3>
<ul>
<li id="pt-anonuserpage">Not logged in</li><li id="pt-anontalk"><a accesskey="n" href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]">Talk</a></li><li id="pt-anoncontribs"><a accesskey="y" href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]">Contributions</a></li><li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Duck+typing" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a accesskey="o" href="/w/index.php?title=Special:UserLogin&amp;returnto=Duck+typing" title="You're encouraged to log in; however, it's not mandatory. [o]">Log in</a></li> </ul>
</div>
<div id="left-navigation">
<div aria-labelledby="p-namespaces-label" class="vectorTabs" id="p-namespaces" role="navigation">
<h3 id="p-namespaces-label">Namespaces</h3>
<ul>
<li class="selected" id="ca-nstab-main"><span><a accesskey="c" href="/wiki/Duck_typing" title="View the content page [c]">Article</a></span></li>
<li id="ca-talk"><span><a accesskey="t" href="/wiki/Talk:Duck_typing" rel="discussion" title="Discussion about the content page [t]">Talk</a></span></li>
</ul>
</div>
<div aria-labelledby="p-variants-label" class="vectorMenu emptyPortlet" id="p-variants" role="navigation">
<h3 id="p-variants-label">
<span>Variants</span><a href="#"></a>
</h3>
<div class="menu">
<ul>
</ul>
</div>
</div>
</div>
<div id="right-navigation">
<div aria-labelledby="p-views-label" class="vectorTabs" id="p-views" role="navigation">
<h3 id="p-views-label">Views</h3>
<ul>
<li class="selected" id="ca-view"><span><a href="/wiki/Duck_typing">Read</a></span></li>
<li id="ca-edit"><span><a accesskey="e" href="/w/index.php?title=Duck_typing&amp;action=edit" title="Edit this page [e]">Edit</a></span></li>
<li class="collapsible" id="ca-history"><span><a accesskey="h" href="/w/index.php?title=Duck_typing&amp;action=history" title="Past revisions of this page [h]">View history</a></span></li>
</ul>
</div>
<div aria-labelledby="p-cactions-label" class="vectorMenu emptyPortlet" id="p-cactions" role="navigation">
<h3 id="p-cactions-label"><span>More</span><a href="#"></a></h3>
<div class="menu">
<ul>
</ul>
</div>
</div>
<div id="p-search" role="search">
<h3>
<label for="searchInput">Search</label>
</h3>
<form action="/w/index.php" id="searchform">
<div id="simpleSearch">
<input accesskey="f" id="searchInput" name="search" placeholder="Search Wikipedia" title="Search Wikipedia [f]" type="search"/><input name="title" type="hidden" value="Special:Search"/><input class="searchButton mw-fallbackSearchButton" id="mw-searchButton" name="fulltext" title="Search Wikipedia for this text" type="submit" value="Search"/><input class="searchButton" id="searchButton" name="go" title="Go to a page with this exact name if it exists" type="submit" value="Go"/> </div>
</form>
</div>
</div>
</div>
<div id="mw-panel">
<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/wiki/Main_Page" title="Visit the main page"></a></div>
<div aria-labelledby="p-navigation-label" class="portal" id="p-navigation" role="navigation">
<h3 id="p-navigation-label">Navigation</h3>
<div class="body">
<ul>
<li id="n-mainpage-description"><a accesskey="z" href="/wiki/Main_Page" title="Visit the main page [z]">Main page</a></li><li id="n-contents"><a href="/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li><li id="n-featuredcontent"><a href="/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li><li id="n-currentevents"><a href="/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li><li id="n-randompage"><a accesskey="x" href="/wiki/Special:Random" title="Load a random article [x]">Random article</a></li><li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li><li id="n-shoplink"><a href="//shop.wikimedia.org" title="Visit the Wikipedia store">Wikipedia store</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-interaction-label" class="portal" id="p-interaction" role="navigation">
<h3 id="p-interaction-label">Interaction</h3>
<div class="body">
<ul>
<li id="n-help"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li><li id="n-aboutsite"><a href="/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li><li id="n-portal"><a href="/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li><li id="n-recentchanges"><a accesskey="r" href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]">Recent changes</a></li><li id="n-contactpage"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia">Contact page</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-tb-label" class="portal" id="p-tb" role="navigation">
<h3 id="p-tb-label">Tools</h3>
<div class="body">
<ul>
<li id="t-whatlinkshere"><a accesskey="j" href="/wiki/Special:WhatLinksHere/Duck_typing" title="List of all English Wikipedia pages containing links to this page [j]">What links here</a></li><li id="t-recentchangeslinked"><a accesskey="k" href="/wiki/Special:RecentChangesLinked/Duck_typing" rel="nofollow" title="Recent changes in pages linked from this page [k]">Related changes</a></li><li id="t-upload"><a accesskey="u" href="/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]">Upload file</a></li><li id="t-specialpages"><a accesskey="q" href="/wiki/Special:SpecialPages" title="A list of all special pages [q]">Special pages</a></li><li id="t-permalink"><a href="/w/index.php?title=Duck_typing&amp;oldid=761563584" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/w/index.php?title=Duck_typing&amp;action=info" title="More information about this page">Page information</a></li><li id="t-wikibase"><a accesskey="g" href="https://www.wikidata.org/wiki/Q374282" title="Link to connected data repository item [g]">Wikidata item</a></li><li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Duck_typing&amp;id=761563584" title="Information on how to cite this page">Cite this page</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-coll-print_export-label" class="portal" id="p-coll-print_export" role="navigation">
<h3 id="p-coll-print_export-label">Print/export</h3>
<div class="body">
<ul>
<li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Duck+typing">Create a book</a></li><li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Duck+typing&amp;returnto=Duck+typing&amp;oldid=761563584&amp;writer=rdf2latex">Download as PDF</a></li><li id="t-print"><a accesskey="p" href="/w/index.php?title=Duck_typing&amp;printable=yes" title="Printable version of this page [p]">Printable version</a></li> </ul>
</div>
</div>
<div aria-labelledby="p-lang-label" class="portal" id="p-lang" role="navigation">
<h3 id="p-lang-label">Languages</h3>
<div class="body">
<ul>
<li class="interlanguage-link interwiki-cs"><a class="interlanguage-link-target" href="https://cs.wikipedia.org/wiki/Duck-typing" hreflang="cs" lang="cs" title="Duck-typing – Czech">Čeština</a></li><li class="interlanguage-link interwiki-de"><a class="interlanguage-link-target" href="https://de.wikipedia.org/wiki/Duck-Typing" hreflang="de" lang="de" title="Duck-Typing – German">Deutsch</a></li><li class="interlanguage-link interwiki-es"><a class="interlanguage-link-target" href="https://es.wikipedia.org/wiki/Duck_typing" hreflang="es" lang="es" title="Duck typing – Spanish">Español</a></li><li class="interlanguage-link interwiki-fa"><a class="interlanguage-link-target" href="https://fa.wikipedia.org/wiki/%D8%AA%D8%A7%DB%8C%D9%BE%E2%80%8C%D8%AF%D9%87%DB%8C_%D8%A7%D8%B1%D8%AF%DA%A9%DB%8C" hreflang="fa" lang="fa" title="تایپ‌دهی اردکی – Persian">فارسی</a></li><li class="interlanguage-link interwiki-fr"><a class="interlanguage-link-target" href="https://fr.wikipedia.org/wiki/Duck_typing" hreflang="fr" lang="fr" title="Duck typing – French">Français</a></li><li class="interlanguage-link interwiki-gl"><a class="interlanguage-link-target" href="https://gl.wikipedia.org/wiki/Tipado_Pato" hreflang="gl" lang="gl" title="Tipado Pato – Galician">Galego</a></li><li class="interlanguage-link interwiki-ko"><a class="interlanguage-link-target" href="https://ko.wikipedia.org/wiki/%EB%8D%95_%ED%83%80%EC%9D%B4%ED%95%91" hreflang="ko" lang="ko" title="덕 타이핑 – Korean">한국어</a></li><li class="interlanguage-link interwiki-it"><a class="interlanguage-link-target" href="https://it.wikipedia.org/wiki/Duck_typing" hreflang="it" lang="it" title="Duck typing – Italian">Italiano</a></li><li class="interlanguage-link interwiki-ms"><a class="interlanguage-link-target" href="https://ms.wikipedia.org/wiki/Penjenisan_itik" hreflang="ms" lang="ms" title="Penjenisan itik – Malay">Bahasa Melayu</a></li><li class="interlanguage-link interwiki-nl"><a class="interlanguage-link-target" href="https://nl.wikipedia.org/wiki/Duck-typing" hreflang="nl" lang="nl" title="Duck-typing – Dutch">Nederlands</a></li><li class="interlanguage-link interwiki-ja"><a class="interlanguage-link-target" href="https://ja.wikipedia.org/wiki/%E3%83%80%E3%83%83%E3%82%AF%E3%83%BB%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0" hreflang="ja" lang="ja" title="ダック・タイピング – Japanese">日本語</a></li><li class="interlanguage-link interwiki-pl"><a class="interlanguage-link-target" href="https://pl.wikipedia.org/wiki/Duck_typing" hreflang="pl" lang="pl" title="Duck typing – Polish">Polski</a></li><li class="interlanguage-link interwiki-pt"><a class="interlanguage-link-target" href="https://pt.wikipedia.org/wiki/Duck_typing" hreflang="pt" lang="pt" title="Duck typing – Portuguese">Português</a></li><li class="interlanguage-link interwiki-ru"><a class="interlanguage-link-target" href="https://ru.wikipedia.org/wiki/%D0%A3%D1%82%D0%B8%D0%BD%D0%B0%D1%8F_%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F" hreflang="ru" lang="ru" title="Утиная типизация – Russian">Русский</a></li><li class="interlanguage-link interwiki-simple"><a class="interlanguage-link-target" href="https://simple.wikipedia.org/wiki/Duck_typing" hreflang="simple" lang="simple" title="Duck typing – Simple English">Simple English</a></li><li class="interlanguage-link interwiki-th"><a class="interlanguage-link-target" href="https://th.wikipedia.org/wiki/%E0%B8%94%E0%B8%B1%E0%B8%81%E0%B9%84%E0%B8%97%E0%B8%9B%E0%B8%9B%E0%B8%B4%E0%B8%87" hreflang="th" lang="th" title="ดักไทปปิง – Thai">ไทย</a></li><li class="interlanguage-link interwiki-uk"><a class="interlanguage-link-target" href="https://uk.wikipedia.org/wiki/%D0%9A%D0%B0%D1%87%D0%B8%D0%BD%D0%B0_%D1%82%D0%B8%D0%BF%D1%96%D0%B7%D0%B0%D1%86%D1%96%D1%8F" hreflang="uk" lang="uk" title="Качина типізація – Ukrainian">Українська</a></li><li class="interlanguage-link interwiki-zh"><a class="interlanguage-link-target" href="https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B" hreflang="zh" lang="zh" title="鸭子类型 – Chinese">中文</a></li> </ul>
<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-edit wb-langlinks-link"><a class="wbc-editpage" href="https://www.wikidata.org/wiki/Q374282#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></span></div> </div>
</div>
</div>
</div>
<div id="footer" role="contentinfo">
<ul id="footer-info">
<li id="footer-info-lastmod"> This page was last modified on 23 January 2017, at 17:21.</li>
<li id="footer-info-copyright">Text is available under the <a href="//en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License" rel="license">Creative Commons Attribution-ShareAlike License</a><a href="//creativecommons.org/licenses/by-sa/3.0/" rel="license" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="//www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
</ul>
<ul id="footer-places">
<li id="footer-places-privacy"><a class="extiw" href="https://wikimediafoundation.org/wiki/Privacy_policy" title="wmf:Privacy policy">Privacy policy</a></li>
<li id="footer-places-about"><a href="/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
<li id="footer-places-disclaimer"><a href="/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
<li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li>
<li id="footer-places-mobileview"><a class="noprint stopMobileRedirectToggle" href="//en.m.wikipedia.org/w/index.php?title=Duck_typing&amp;mobileaction=toggle_view_mobile">Mobile view</a></li>
</ul>
<ul class="noprint" id="footer-icons">
<li id="footer-copyrightico">
<a href="https://wikimediafoundation.org/"><img alt="Wikimedia Foundation" height="31" src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88"/></a> </li>
<li id="footer-poweredbyico">
<a href="//www.mediawiki.org/"><img alt="Powered by MediaWiki" height="31" src="/static/images/poweredby_mediawiki_88x31.png" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88"/></a> </li>
</ul>
<div style="clear:both"></div>
</div>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.164","walltime":"0.204","ppvisitednodes":{"value":920,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":16030,"limit":2097152},"templateargumentsize":{"value":647,"limit":2097152},"expansiondepth":{"value":11,"limit":40},"expensivefunctioncount":{"value":1,"limit":500},"entityaccesscount":{"value":0,"limit":400},"timingprofile":["100.00%  155.866      1 -total"," 49.78%   77.594      1 Template:Reflist"," 38.86%   60.575      6 Template:Cite_web"," 24.64%   38.403      1 Template:Citation_needed"," 21.23%   33.083      1 Template:Fix"," 13.51%   21.055      1 Template:Type_systems"," 13.27%   20.679      2 Template:Category_handler"," 12.40%   19.320      1 Template:Sidebar","  6.43%   10.028      1 Template:Delink","  3.28%    5.116      8 Template:Code"]},"scribunto":{"limitreport-timeusage":{"value":"0.068","limit":"10.000"},"limitreport-memusage":{"value":3123787,"limit":52428800}},"cachereport":{"origin":"mw1214","timestamp":"20170123172150","ttl":2592000,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":64,"wgHostname":"mw1173"});});</script>
</body>
</html>
